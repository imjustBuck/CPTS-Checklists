🌐 Web App Exploitation & Testing

- [ ] Check all FFUF-discovered pages manually for hidden inputs or parameters
- [ ] Test all form inputs for reflection, IDOR, and basic auth bypass
- [ ] Look for common login portals (`login`, `admin`, `wp-login.php`, etc.)
- [ ] Try default creds (`admin:admin`, `test:test`, `guest:guest`, etc.)
- [ ] Run `wpscan --url <target> --enumerate u,vp,vt` if WordPress detected
- [ ] Check for exposed `.git` or `.svn` directories
- [ ] Interact with any file upload features
  - [ ] Try bypassing extension filters
  - [ ] Try content-type manipulation
  - [ ] Try HTTP verb tampering (e.g., `TRACK`, `PUT`, `MOVE`)
- [ ] Test for:
  - [ ] Command injection
  - [ ] SQL injection
  - [ ] XSS (stored + reflected)
  - [ ] SSTI
  - [ ] XXE
  - [ ] LFI / RFI
  - [ ] SSRF
- [ ] Interact with URLs using `?id=`, `?page=`, `?file=`, etc. for injection
- [ ] Check robots.txt for disallowed paths
- [ ] Try parameter fuzzing (`ffuf -X GET -u 'http://site/page.php?FUZZ=test' -w wordlist`)
- [ ] Check for admin panels, dashboards, and APIs
- [ ] Run `whatweb -a 3`, identify frameworks, versions, and CMS
- [ ] If login succeeds, check for:
  - [ ] Account management features (e.g., change password, reset password)
  - [ ] Upload zones
  - [ ] Sensitive information disclosures (emails, tokens, debug output)
  - [ ] Anything marked as "admin", "dev", "test", "beta", or "blind"
- [ ] Enable Burp Logger and click through all paths as a low-priv user
- [ ] Send all POST requests to Repeater for tampering
- [ ] Review JavaScript for hidden endpoints, credentials, or tokens
- [ ] Try direct access to JS/CSS/HTML via discovered paths (e.g., `/assets/app.js`)



Command Injection Mini-Test
- [ ] Try basic payloads: ; id , && whoami , | whoami
- [ ] Try blind injection: sleep 5, ping -c 5 127.0.0.1
- [ ] Try piping commands: | cat /etc/passwd


SQL Injection Mini-Test
- [ ] Test with single quote: '
- [ ] UNION-based injection: ' UNION SELECT NULL,NULL--
- [ ] Time-based injection: ' OR SLEEP(5)--
- [ ] Comment everything after payload: --

XSS (Stored/Reflected) Mini-Test
- [ ] Basic alert: <script>alert(1)</script>
- [ ] Event-based payloads: " onmouseover="alert(1)
- [ ] Try <img src=x onerror=alert(1)>
- [ ] Use Burp Repeater for reflected params


SSTI Mini-Test
- [ ] Test with {{7*7}} or ${7*7} and observe output
- [ ] Check template extensions: .tpl, .twig, .jinja2


XXE Mini-Test
- [ ] Inject basic XXE payload in XML:
```xml
<?xml version="1.0"?>
<!DOCTYPE root [
<!ENTITY test SYSTEM "file:///etc/passwd">
]>
<root>&test;</root>
```

LFI/RFI Mini-Test
- [ ] Try ../../../../etc/passwd
- [ ] Try wrappers: php://filter/convert.base64-encode/resource=...
- [ ] Try including remote files (if RFI possible)

SSRF Mini-Test
- [ ] Use localhost payloads: http://127.0.0.1
- [ ] Use internal metadata IPs: http://169.254.169.254
- [ ] Try changing protocols: gopher://, file://


## 🕵️‍♂️ Active Web Recon Checklist

🔲 **Directory & Page Fuzzing**

- Use `ffuf`, `dirsearch`, or `feroxbuster`
    
- Wordlists: `SecLists`, `common.txt`, `CMS-specific lists`
    
- Always check `robots.txt` for hidden paths
    

🔲 **Parameter and Value Fuzzing**

- Fuzz GET and POST parameters
    
- Look for `debug=true`, `admin=1`, `bypass=1`, etc.
    
- Tools: `ffuf`, Burp Intruder
    

🔲 **VHost Discovery**

- Use `ffuf -H "Host: FUZZ.target" -w vhosts.txt`
    
- Parse SSL certificates with `crt.sh`, `amass`, `certspotter`
    

🔲 **Header Analysis**

- Review cookies, server headers, CORS settings
    
- Note `X-Powered-By`, `Set-Cookie`, `Access-Control-Allow-Origin`
    

---

## 🛡️ Passive Web Recon Checklist

🔲 **Google Dorks**

- Search for leaks, exposed repos, forgotten staging

- [ ] 🔎 **Find Exposed Git Repositories**
- [ ] site:targetdomain.com ext:git
- [ ] intitle:"Index of" ".git"

- [ ] 🔎 **Find Backup Files**
- [ ] site:targetdomain.com ext:bak | ext:old | ext:backup
- [ ] intitle:"Index of" (bak|old|backup)

- [ ] 🔎 **Find Exposed Config Files**
- [ ] site:targetdomain.com ext:env | ext:config | ext:ini
- [ ] site:targetdomain.com "DB_PASSWORD"

- [ ] 🔎 **Find Forgotten Staging / Dev Environments**
- [ ] site:targetdomain.com inurl:staging
- [ ] site:targetdomain.com inurl:dev
- [ ] site:targetdomain.com inurl:test
- [ ] site:targetdomain.com intitle:"development"

- [ ] 🔎 **Look for Open Directories**
- [ ] site:targetdomain.com intitle:"index of"


- [ ] 🔎 **Search for SQL Dumps / Password Files**
- [ ] site:targetdomain.com ext:sql | ext:db | ext:txt "password"

- [ ] 🔎 **Search for Publicly Accessible Login Portals**
- [ ] site:targetdomain.com inurl:login
- [ ] site:targetdomain.com intitle:"admin"

## 📌 Quick Usage Mental Model During Exam

| Situation                  | Google Dork to Fire                           |
| -------------------------- | --------------------------------------------- |
| Trying to find Git repos   | `site:targetdomain.com ext:git`               |
| Check if backups exist     | `site:targetdomain.com ext:bak                |
| Look for env files / creds | `site:targetdomain.com ext:env "DB_PASSWORD"` |
| Discover staging/dev       | `site:targetdomain.com inurl:staging`         |
| Quick file exposure check  | `site:targetdomain.com intitle:"index of"`    |





🔲 **Tech Stack Analysis**

- Use `wappalyzer`, `whatweb`, `builtwith`, or HTTPx
    
- Confirm backend tech (PHP, Django, Rails, etc.)
    

🔲 **DNS & Certificate Recon**

- Pull subdomains using `crt.sh`, `amass`, `dnscan`
    
- Look for weird internal domains
    

---

## 🔧 Tools Quick Reference (Know These)

🔲 **FinalRecon** — passive scan and light footprint recon

🔲 **Spiderfoot** — OSINT automation (tune noise settings)

🔲 **Recon-ng** — linked enumeration and pivoting

🔲 **theHarvester** — emails, hostnames, DNS pulling

🔲 **Eyewitness** — screenshot all web portals

🔲 **OSINT Framework** — passive recon tree / target selection
